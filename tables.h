#pragma once

static const struct {
  ECL ecl;
  int numericMax;
  int alphaMax;
  int byteMax;
  int version;
} modes[] = {
  { ECL::L, 41, 25, 17, 1 },
  { ECL::M, 34, 20, 14, 1 },
  { ECL::Q, 27, 16, 11, 1 },
  { ECL::H, 17, 10, 7, 1 },
  { ECL::L, 77, 47, 32, 2 },
  { ECL::M, 63, 38, 26, 2 },
  { ECL::Q, 48, 29, 20, 2 },
  { ECL::H, 34, 20, 14, 2 },
  { ECL::L, 127, 77, 53, 3 },
  { ECL::M, 101, 61, 42, 3 },
  { ECL::Q, 77, 47, 32, 3 },
  { ECL::H, 58, 35, 24, 3 },
  { ECL::L, 187, 114, 78, 4 },
  { ECL::M, 149, 90, 62, 4 },
  { ECL::Q, 111, 67, 46, 4 },
  { ECL::H, 82, 50, 34, 4 },
  { ECL::L, 255, 154, 106, 5 },
  { ECL::M, 202, 122, 84, 5 },
  { ECL::Q, 144, 87, 60, 5 },
  { ECL::H, 106, 64, 44, 5 },
  { ECL::L, 322, 195, 134, 6 },
  { ECL::M, 255, 154, 106, 6 },
  { ECL::Q, 178, 108, 74, 6 },
  { ECL::H, 139, 84, 58, 6 },
};

#define numModes (sizeof(modes) / sizeof(modes[0]))

static const struct {
  int version;
  ECL ecl;
  int ecPerBlock;
  int g1Blocks;
  int g1DataPerBlock;
  int g2Blocks;
  int g2DataPerBlock;
} ecTable[] = {
  { 1, ECL::L, 7, 1, 19, 0, 0 },
  { 1, ECL::M, 10, 1, 16, 0, 0 },
  { 1, ECL::Q, 13, 1, 13, 0, 0 },
  { 1, ECL::H, 17, 1, 9, 0, 0 },
  { 2, ECL::L, 10, 1, 34, 0, 0 },
  { 2, ECL::M, 16, 1, 28, 0, 0 },
  { 2, ECL::Q, 22, 1, 22, 0, 0 },
  { 2, ECL::H, 28, 1, 16, 0, 0 },
  { 3, ECL::L, 15, 1, 55, 0, 0 },
  { 3, ECL::M, 26, 1, 44, 0, 0 },
  { 3, ECL::Q, 18, 2, 17, 0, 0 },
  { 3, ECL::H, 22, 2, 13, 0, 0 },
  { 4, ECL::L, 20, 1, 80, 0, 0 },
  { 4, ECL::M, 18, 2, 32, 0, 0 },
  { 4, ECL::Q, 26, 2, 24, 0, 0 },
  { 4, ECL::H, 16, 4, 9, 0, 0 },
  { 5, ECL::L, 26, 1, 108, 0, 0 },
  { 5, ECL::M, 24, 2, 43, 0, 0 },
  { 5, ECL::Q, 18, 2, 15, 2, 16 },
  { 5, ECL::H, 22, 2, 11, 2, 12 },
  { 6, ECL::L, 18, 2, 68, 0, 0 },
  { 6, ECL::M, 16, 4, 27, 0, 0 },
  { 6, ECL::Q, 24, 4, 19, 0, 0 },
  { 6, ECL::H, 28, 4, 15, 0, 0 },
};

#define numECs (sizeof(ecTable) / sizeof(ecTable[0]))

static const uint8_t exponents[][28] = {
  {},  // 0
  {},  // 1
  {},  // 2
  {},  // 3
  {},  // 4
  {},  // 5
  {},  // 6
  { 87, 229, 146, 149, 238, 102, 21, },  // 7
  {},  // 8
  {},  // 9
  { 251, 67, 46, 61, 118, 70, 64, 94, 32, 45, }, // 10,
  {},  // 11
  {},  // 12
  { 74, 152, 176, 100, 86, 100, 106, 104, 130, 218, 206, 140, 78, },  // 13
  {},  // 14
  { 8, 183, 61, 91, 202, 37, 51, 58, 58, 237, 140, 124, 5, 99, 105, },  // 15
  { 120, 104, 107, 109, 102, 161, 76, 3, 91, 191, 147, 169, 182, 194, 225,
    120, },  // 16
  { 43, 139, 206, 78, 43, 239, 123, 206, 214, 147, 24, 99, 150, 39, 243, 163,
    136, },  // 17
  { 215, 234, 158, 94, 184, 97, 118, 170, 79, 187, 152, 148, 252, 179, 5, 98,
    96, 153, },  // 18
  {},  // 19
  { 17, 60, 79, 50, 61, 163, 26, 187, 202, 180, 221, 225, 83, 239, 156, 164,
    212, 212, 188, 190, },  // 20
  {},  // 21
  { 210, 171, 247, 242, 93, 230, 14, 109, 221, 53, 200, 74, 8, 172, 98, 80,
    219, 134, 160, 105, 165, 231},  // 22
  {},  // 23
  { 229, 121, 135, 48, 211, 117, 251, 126, 159, 180, 169, 152, 192, 226, 228,
    218, 111, 0, 117, 232, 87, 96, 227, 21, },  // 24
  {},  // 25
  { 173, 125, 158, 2, 103, 182, 118, 17, 145, 201, 111, 28, 165,  53, 161, 21,
    245, 142, 13, 102, 48, 227, 153, 145, 218, 70, },  // 26
  {},  // 27
  { 168, 223, 200, 104, 224, 234, 108, 180, 110, 190, 195, 147, 205, 27, 232,
    201, 21, 43, 245, 87, 42, 195, 212, 119, 242, 37, 9, 123},  // 28
};


